/* -*- c++ -*- */
/*
 * Copyright (C) 2016  Andy Walls <awalls.cx18@gmail.com>
 *
 * This file was automatically generated by gr_modtool from GNU Radio
 *
 * This file was automatically generated from a template incorporating
 * data input by Andy Walls and subsequently hand edited by Andy Walls.
 * See http://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput .
 */

#ifndef INCLUDED_NWR_BURST_DETECT_AND_TAG_IMPL_H
#define INCLUDED_NWR_BURST_DETECT_AND_TAG_IMPL_H

#include <nwr/burst_detect_and_tag.h>
#include <gnuradio/thread/thread.h>
#include <uhd/types/time_spec.hpp>

namespace gr {
  namespace nwr {

    class burst_detect_and_tag_impl : public burst_detect_and_tag
    {
     private:
      const size_t d_item_size;
      const float  d_samp_rate;
      const float  d_threshold;
      gr::thread::mutex d_floor_mutex;
      float  d_floor;
      const int d_declare_len;
      const unsigned int d_max_len;
      const float d_sob_amp_frac;
      long int d_eob_smpl_delay;
      const unsigned long int d_guard_smpl_intvl;
      const pmt::pmt_t d_sob_key;
      const pmt::pmt_t d_eob_key;
      const pmt::pmt_t d_src_id;
      const pmt::pmt_t d_rx_time_key;
      const pmt::pmt_t d_msg_port;
      float *d_result;

      enum det_state { SEARCH, WINDOW, BURST, GUARD };
      det_state d_state;
      unsigned int d_burst_len;
      unsigned int d_eob_len;
      uint64_t d_last_eob_offset;

      std::vector<tag_t> d_tags;

      ::uhd::time_spec_t d_ref_time;
      uint64_t d_ref_time_offset;

      void msg_handler(pmt::pmt_t msg);
      int calc_sob_index(int first, int last);

      bool parse_time_tag(const tag_t &time_tag,
                          uint64_t &seconds, double &subseconds);
      void update_ref_time(uint64_t offset);
      pmt::pmt_t compute_sample_time(uint64_t offset);

      int find_next_above_thresh(const int start, const int end);
      int find_next_at_or_below_thresh(const int start, const int end);

     public:
      burst_detect_and_tag_impl(size_t item_size,
                                float samp_rate,
                                float thresh_db,
                                float init_floor_est,
                                float declare_dur,
                                float max_dur,
                                float sob_amp_frac,
                                const std::string &sob_key,
                                const std::string &eob_key,
                                float eob_delay,
                                float guard_interval);
      ~burst_detect_and_tag_impl();

      int work(int noutput_items,
	       gr_vector_const_void_star &input_items,
	       gr_vector_void_star &output_items);
    };

  } // namespace nwr 
} // namespace gr

#endif /* INCLUDED_NWR_BURST_DETECT_AND_TAG_IMPL_H */

