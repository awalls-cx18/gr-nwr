/* -*- c++ -*- */
/*
 * Copyright (C) 2016  Andy Walls <awalls.cx18@gmail.com>
 *
 * This file was automatically generated by gr_modtool from GNU Radio
 *
 * This file was automatically generated from a template incorporating
 * data input by Andy Walls and later hand edited by Andy Walls.
 * See http://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput .
 */

#ifndef INCLUDED_NWR_SAME_BURST_DECODER_IMPL_H
#define INCLUDED_NWR_SAME_BURST_DECODER_IMPL_H

#include <nwr/same_burst_decoder.h>
#include <pmt/pmt.h>

namespace gr {
  namespace nwr {

    class same_burst_decoder_impl : public same_burst_decoder
    {
     private:
      pmt::pmt_t d_sob_key;
      pmt::pmt_t d_eob_key;
      pmt::pmt_t d_printable_key;
      pmt::pmt_t d_bytes_key;
      pmt::pmt_t d_hard_bits_key;
      pmt::pmt_t d_soft_bits_key;

      static const unsigned int PREAMBLE_BYTES = 16;
      static const unsigned int HEADER_BYTES = 4;
      static const unsigned int MAX_SAME_BYTES =
            16           // Preamble: 0xAB, 16 times
          + 4            // Header: ZCZC (or NNNN for EOM)
          + 1 + 3        // -ORG
          + 1 + 3        // -EEE
          + (1 + 6) * 31 // -PSSCCC up to 31 times
          + 1 + 4        // +TTTT
          + 1 + 7        // -JJJHHMM
          + 1 + 8 + 1;   // -LLLLLLLL-

      static const unsigned int MAX_BYTES = MAX_SAME_BYTES + 1;
      static const unsigned int MAX_BITS = MAX_BYTES * 8;

      std::vector<float> d_soft_bits;
      std::vector<uint8_t> d_hard_bits;
      std::vector<uint8_t> d_bytes;
      std::string d_printable_str;

      std::vector<tag_t> d_tags;

      bool d_in_burst;

      uint8_t slice(float x) { return x < 0.0f ? 0 : 1; }
      void clear();
      void output_messages();
      bool process_bits();
      void process_input(const float *in, int start, int bound);

     public:
      same_burst_decoder_impl(const std::string &sob_key,
                              const std::string &eob_key);
      ~same_burst_decoder_impl();

      int work(int noutput_items,
         gr_vector_const_void_star &input_items,
         gr_vector_void_star &output_items);
    };

  } // namespace nwr
} // namespace gr

#endif /* INCLUDED_NWR_SAME_BURST_DECODER_IMPL_H */

