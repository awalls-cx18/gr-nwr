/* -*- c++ -*- */
/*
 * Copyright (C) 2016  Andy Walls <awalls.cx18@gmail.com>
 *
 * This file was automatically generated by gr_modtool from GNU Radio
 *
 * This file was automatically generated from a template incorporating
 * data input by Andy Walls and subsequently hand edited by Andy Walls.
 * See http://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput .
 */

#ifndef INCLUDED_NWR_BURST_DETECT_AND_TAG_H
#define INCLUDED_NWR_BURST_DETECT_AND_TAG_H

#include <nwr/api.h>
#include <gnuradio/sync_block.h>

namespace gr {
  namespace nwr {

    /*!
     * \brief Burst/Packet Energy Detector that Tags
     * \ingroup nwr
     *
     * \details
     * This block implements an Energy detector that marks the start
     * and end of bursts or packets, that cross a threshold for a minimum
     * amount of time.
     *
     * The items from the "in" are passed unmodified to "out",
     * except to mark the stream with user specified burst start and end
     * tags (e.g. "rx_sob" and "rx_eob").
     *
     * The "mag" input should be a stream indicating the signal envelope
     * (either magnitude, magnitude^2, or something else) against which the
     * threshold comparisons will be made to declare the start or end of burst.
     *
     * The optional "floor_msg" input expects a message with a single PMT of 
     * type double to provide an updated noise floor estimate, in units
     * consistent for comparison with items on the "mag" input.
     *
     */
    class NWR_API burst_detect_and_tag : virtual public gr::sync_block
    {
     public:
      typedef boost::shared_ptr<burst_detect_and_tag> sptr;

      /*!
       * \brief Make a Burst/Packet Energy Detector that Tags
       *
       * \param item_size The size of an item passing from "in" to "out"
       * \param samp_rate The rate of items passing from "in" to "out"
       * \param thresh_db The threshold set point in dB above the noise floor
       * \param init_floor_est The initial noise floor estimate
       * \param declare_dur The minimum duration required to declare a burst
       * \param max_dur The maximum duration allowed for a burst
       * \param sob_amp_frac How high up the initial ramp to declare the start
       * \param sob_key Tag name for the start of burst marker
       * \param eob_key Tag name for the end of burst marker
       * \param eob_delay How long after burst falls below threshold to delay
       *                    the end of burst declaration
       * \param guard_interval Minimum delay before a new burst can be declared
       */
      static sptr make(size_t item_size,
                       float samp_rate,
                       float thresh_db,
                       float init_floor_est,
                       float declare_dur,
                       float max_dur,
                       float sob_amp_frac = 0.0f,
                       const std::string &sob_key = "rx_sob",
                       const std::string &eob_key = "rx_eob",
                       float eob_delay = 0.0,
                       float guard_interval = 0.9);
    };

  } // namespace nwr 
} // namespace gr

#endif /* INCLUDED_NWR_BURST_DETECT_AND_TAG_H */

