/* -*- c++ -*- */
/*
 * Copyright (C) 2016  Andy Walls <awalls.cx18@gmail.com>
 *
 * This file was automatically generated by gr_modtool from GNU Radio
 *
 * This file was automatically generated from a template incorporating
 * data input by Andy Walls.
 * See http://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput .
 */

#ifndef INCLUDED_NWR_LMS_DA_EQUALIZER_FF_H
#define INCLUDED_NWR_LMS_DA_EQUALIZER_FF_H

#include <nwr/api.h>
#include <gnuradio/sync_block.h>

namespace gr {
  namespace nwr {

    /*!
     * \brief Data-Aided LMS Feed-Forward Estimator Equalizer (float -> float)
     * \ingroup nwr
     *
     * \details
     * This block implements an equalizer using a data-aided LMS feed-forward
     * estimator. This block assumes it occurs *before* clock recovery.
     *
     * The "data" in "data-aided" is a sync word sample sequence, whose
     * position has already been marked with a tag by the corr_est block.
     *
     * The LMS algorithm used is from:
     * Moon, Todd K.; Stirling, Wynn C.; _Mathematical_Methods_and_Algorithms_
     * for_Signal_Processing_; Prentice Hall, 2000, ISBN 0-201-36186-8
     */
    class NWR_API lms_da_equalizer_ff : virtual public gr::sync_block
    {
     public:
      typedef boost::shared_ptr<lms_da_equalizer_ff> sptr;

      /*!
       * \brief Make a LMS data-aided equalizer (float input/float output)
       *
       * \param training_samples Training sequence samples
       * \param sync_tag Tag name to trigger retraining of the equalizer
       * \param num_taps Length of the equalization filter
       * \param mu LMS update step size (an error signal gain)
       *
       * In general, the LMS solution only converges when the mu is
       * less than 2.0/(num_taps * signal_power).  So predictable
       * convergence requires an AGC before this block.  Also shorter
       * equalizer filters are prefered to reduce processing load.
       * The smaller the mu, the slower the filter adaptation.
       */

      static sptr make(const std::vector<float> &training_samples,
                       const std::string &sync_tag,
                       unsigned int num_taps,
                       float mu);

      virtual void set_taps(const std::vector<float> &taps) = 0;
      virtual std::vector<float> taps() const = 0;
      virtual float gain() const = 0;
      virtual void set_gain(float mu) = 0;

    };

  } // namespace nwr
} // namespace gr

#endif /* INCLUDED_NWR_LMS_DA_EQUALIZER_FF_H */

