/* -*- c++ -*- */
/* 
 * Copyright 2019 Andy Walls <awalls.cx18@gmail.com>.
 *
 * This file was automatically generated by gr_modtool from GNU Radio
 *
 * This file was automatically generated from a template incorporating
 * data input by Andy Walls and later hand edited by Andy Walls.
 * See http://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput .
 */


#ifndef INCLUDED_NWR_FSK_CPS_CFO_EST_CC_H
#define INCLUDED_NWR_FSK_CPS_CFO_EST_CC_H

#include <nwr/api.h>
#include <gnuradio/sync_block.h>
#include <gnuradio/fft/window.h>

namespace gr {
  namespace nwr {

    /*!
     * \brief FSK Cross-Power Spectrum Carrier Frequency Offset Estimator Block
     * \ingroup nwr
     *
     * \details
     * This block estimates the carrier frequency offset of a 2-FSK signal
     * and outputs the estimate, in Hertz, on a stream tag sepcified by the
     * user.  The block will always make an estimate when it encounters
     * a start of burst stream tag specified by the user.  The can also
     * optionally output estimates periodically on an interval specified by
     * the user.
     *
     * This block internally squares the input signal to generate spectral
     * peaks around twice the carrier frequency and then uses a cross power
     * spectrum technique to precisely determine the frequencies of those
     * spectral peaks and estimate the carrier frequency.
     *
     * The technique this block uses should work well for GMSK (GFSK with a
     * modulation index of 0.5).  Preliminary simulations show it should
     * also work with GFSK with modulation indices that are multiples of 0.5.
     * Caveat emptor: No simulation has been performed for other FSK pulse
     * filters, modulation indices, or FSK with more than 2 levels.
     *
     * Smith, David C., Nelson, Douglas J., "Preprocessing AIS Signal for
     * Demodulation in Co-Channel Interference", Proceedings of the 12th
     * IASTED International Conference, Signal and Image Processing (2010),
     * 23-24 August 2010, pp. 56-63
     *
     * Nelson, Douglas, "Special Purpose Correlation Functions for Improved
     * Signal Detection and Parameter Estimation", Proceedings - ICASSP,
     * IEEE International Conference on Acoustics, Speech and Signal
     * Processing, pp 4:73-76, January 1993
     *
     * Nelson, Douglas J., "Instantaneous Higher Order Phase Derivatives",
     * Digital Signal Processing, pp. 12(2-3):416-428, April 2002
     *
     * Hu, Guobing; Wu, Shanshan; Hu, Xiaoyan; Jing, Min; Gao, Yan;
     * "Blind Frequency and Symbol Rate Estimation for MSK Signal Under
     * Low Signal to Noise Ratio", Journal of Computational Information
     * Systems, 9:16 (2013), pp. 6651-6659
     */
    class NWR_API fsk_cps_cfo_est_cc : virtual public gr::sync_block
    {
     public:
      typedef boost::shared_ptr<fsk_cps_cfo_est_cc> sptr;

      /*!
       * \brief Make an FSK Cross-Power Spectrum CFO Estimator block
       *
       * \param samp_rate  Sample rate in samples/second
       * \param mod_index  Expected modulation index
       * \param baud_rate  Expected baud rate in symbols/second
       * \param tolerance  Allowed deviation in baud rate in symbols/second
       * \param fft_size   FFT length to use in samples
       * \param window     Window function to apply to the samples before FFT
       * \param beta       Beta parameter for a Kaiser window
       * \param output_tag Tag name use to output CFO estimates
       * \param sob_tag    Tag name that indicates the start of a burst
       * \param periodic   Addtionally output periodic CFO estimates
       * \param interval   Interval in seconds for periodic CFO estimates
       */
      static sptr make(float samp_rate,
                       float mod_index,
                       float baud_rate,
                       float tolerance,
                       int fft_size,
                       gr::fft::window::win_type window = gr::fft::window::WIN_BLACKMAN_HARRIS,
                       float beta = 4.55,
                       const std::string &output_tag = "cfo_est",
                       const std::string &sob_tag = "rx_sob",
                       bool periodic = false,
                       float interval = 1.0f);
    };

  } // namespace nwr
} // namespace gr

#endif /* INCLUDED_NWR_FSK_CPS_CFO_EST_CC_H */

